@page "/day-14"
@using System.Diagnostics
@using System.Text
@using System.Text.RegularExpressions

@inject ISnackbar Snackbar

<MudPaper Width="100%" Class="mx-2 pa-2" Outlined="false" Square="true" Elevation="0">

	<MudText Typo="Typo.h4" GutterBottom="true">Day @Puzzle.Day: @Puzzle.Name</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionA</MudText>

	<MudText Typo="Typo.body1" GutterBottom="true">--- Part Two ---</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionB</MudText>

	<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@UpdatePuzzle">Update Puzzle</MudButton>
</MudPaper>

@code {
	private Puzzle Puzzle { get; set; } = new();
	private string PolymerTemplate { get; set; }
	private Dictionary<string, char> InsertionRules { get; set; } = new();


	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			Puzzle = Utilities.GetPuzzleInput("Day14-practice");
			var data = Puzzle.Input.Split('\n', StringSplitOptions.RemoveEmptyEntries).ToList();
			InsertionRules = data.Skip(1).Select(rule => rule.Split(" -> ")).ToDictionary(x => x[0], x => x[1][0]);
			PolymerTemplate = data.First();

			SolvePartA();
			SolvePartB();
			StateHasChanged();
		}

	}

	private void SolvePartA()
	{
		Puzzle.SolutionA = PolymerCalculator(10).ToString();
	}

	private void SolvePartB()
	{
		Puzzle.SolutionB = PolymerCalculator(40).ToString();
	}

	private long PolymerCalculator(int steps)
	{
		var polymerPairs = InsertionRules.ToDictionary(rule => rule.Key, rule => new Regex(rule.Key).Matches(PolymerTemplate).LongCount());

		var chars = Enumerable.Range(0, 26).Select(e => ('A' + e)).ToDictionary(c => c, c => PolymerTemplate.LongCount(t => t == c));

		for (int i = 0; i < steps; i++)
		{
			foreach (var rule in InsertionRules)
			{
				chars[rule.Value] += polymerPairs[rule.Key];
			}

			polymerPairs = InsertionRules.ToDictionary(rule => rule.Key, rule => InsertionRules.Where(r => r.Key.Insert(1, r.Value.ToString()).Contains(rule.Key)).Sum(x => polymerPairs[x.Key]));
		}

		var elements = chars.Where(x => x.Value > 0).OrderByDescending(g => g.Value);
		var mostCommon = elements.First().Value;
		var leastCommon = elements.Last().Value;
		return mostCommon - leastCommon;
	}

	private async Task UpdatePuzzle()
	{
		await Utilities.UpdatePuzzleFile(Puzzle);
		Snackbar.Add("Puzzle JSON updated!", Severity.Success);
	}

}
