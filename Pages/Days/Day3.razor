@page "/day-3"

@using System.Text;

@inject ISnackbar SnackBar

<MudPaper Width="100%" Class="mx-2 pa-2" Outlined="false" Square="true" Elevation="0">

	<MudText Typo="Typo.h4" GutterBottom="true">Day 3: Rucksack Reorganization</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionA</MudText>

	<MudText Typo="Typo.body1" GutterBottom="true">--- Part Two ---</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionB</MudText>

	<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@UpdatePuzzle">Update Puzzle</MudButton>
</MudPaper>

@code {
	private Puzzle Puzzle { get; set; } = new();

	private async Task UpdatePuzzle()
	{
		await Utilities.UpdatePuzzleFile(Puzzle);
		SnackBar.Add("Puzzle JSON updated!", Severity.Success);
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			Puzzle = Utilities.GetPuzzleInput("Day3");
			var data = Puzzle.Input.Split('\n', StringSplitOptions.RemoveEmptyEntries);
			Puzzle.SolutionA = GetSolutionA(data);
			Puzzle.SolutionB = GetSolutionB(data);
			StateHasChanged();
		}

	}

	private string GetSolutionA(string[] data)
	{
		var rucksacks = data.Select(rucksack =>
		{
			var first = rucksack.Substring(0, (int)(rucksack.Length / 2));
			var last = rucksack.Substring((int)(rucksack.Length / 2), (int)(rucksack.Length / 2));
			return new List<string>() { first, last };
		}).ToList();
		var priorities = new List<int>();

		foreach(var rucksack in rucksacks)
		{
			var priority = (int)rucksack[0].FirstOrDefault(rucksack[1].Contains);
			if (priority >= 97)
			{
				// Lowercase
				priority -= 96;
			} else {
				priority -= 38;
			}
			priorities.Add(priority);
		}


		return priorities.Sum().ToString(); 
	}

	private string GetSolutionB(string[] data)
	{
		var rucksacks = new List<List<string>>();
		var ruckGroups = data.Select((x, i) => data.Skip(i * 3).Take(3).ToList()).Where(a => a.Any()).ToList();
		var priorities = new List<int>();


		foreach(var ruckgroup in ruckGroups)
		{

			int priority = 0;
			foreach(char c in ruckgroup[0]){
				var ruck2HasMatch = ruckgroup[1].Contains(c);
				var ruck3HasMatch = ruckgroup[2].Contains(c);
				if (ruck2HasMatch && ruck3HasMatch){
					if (c >= 97) priority = c - 96;
					else priority = c - 38;
					priorities.Add(priority);
					break;
				}
			}
		}

		return priorities.Sum().ToString();
	}
}
