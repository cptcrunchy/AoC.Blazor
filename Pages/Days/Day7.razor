@page "/day-7"
@using System.Diagnostics

@inject ISnackbar Snackbar

<MudPaper Width="100%" Class="mx-2 pa-2" Outlined="false" Square="true" Elevation="0">

	<MudText Typo="Typo.h4" GutterBottom="true">Day 7: The Treachery of Whales</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionA</MudText>

	<MudText Typo="Typo.body1" GutterBottom="true">--- Part Two ---</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionB</MudText>

	<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@UpdatePuzzle">Update Puzzle</MudButton>
</MudPaper>

@code {
	private Puzzle Puzzle { get; set; } = new();

	private List<int> CrabSubs { get; set; } = new();

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			Puzzle = Utilities.GetPuzzleInput("Day7");
			CrabSubs = Puzzle.Input.Split(',').Select(int.Parse).ToList();

			CalculateCrabFuelCost();
			CalculateCrabFuelCostAlt();
			StateHasChanged();
		}

	}

	private void CalculateCrabFuelCost()
	{
		var max = CrabSubs.Max();
		var min = CrabSubs.Min();
		var positions = Enumerable.Range(min, max - min + 1);
		var fuelConsumed = positions.Min(pos => CrabSubs.Sum(crabSub => Distance(crabSub, pos)));
				
		Puzzle.SolutionA = fuelConsumed.ToString();
	}

	private void CalculateCrabFuelCostAlt()
	{
		var max = CrabSubs.Max();
		var min = CrabSubs.Min();
		var positions = Enumerable.Range(min, max - min + 1);
		var fuelConsumed = positions.Min(pos => CrabSubs.Sum(crabSub => FuelConsumed(Distance(crabSub,pos))));

		Puzzle.SolutionB = fuelConsumed.ToString();
	}

	private static int Distance(int crabSub, int pos) => Math.Abs(crabSub - pos);
	private static int FuelConsumed(int fuel) => (fuel * (fuel + 1)) / 2;

	private async Task UpdatePuzzle()
	{
		await Utilities.UpdatePuzzleFile(Puzzle);
		Snackbar.Add("Puzzle JSON updated!", Severity.Success);
	}

	}
