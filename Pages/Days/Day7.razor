@page "/day-7"
@using System.Diagnostics

@inject ISnackbar Snackbar

<MudPaper Width="100%" Class="mx-2 pa-2" Outlined="false" Square="true" Elevation="0">

	<MudText Typo="Typo.h4" GutterBottom="true">Day 7: </MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionA</MudText>

	<MudText Typo="Typo.body1" GutterBottom="true">--- Part Two ---</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionB</MudText>

	<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@UpdatePuzzle">Update Puzzle</MudButton>
</MudPaper>

@code {
	private Puzzle Puzzle { get; set; } = new();

	private List<int> CrabSubs { get; set; } = new();

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			Puzzle = Utilities.GetPuzzleInput("Day7-practice");
			CrabSubs = Puzzle.Input.Split(',').Select(int.Parse).ToList();

			CalculateCrabFuelCost();
			StateHasChanged();
		}

	}

	private void CalculateCrabFuelCost()
	{
		var maxPosition = CrabSubs.Max();
		var minPosition = CrabSubs.Min();
		var position = minPosition;

		Dictionary<int,int> fuelConsumptions = new();
		do
		{
			var totalFuelConsumed = 0;
			foreach (var crabSub in CrabSubs)
				totalFuelConsumed += Math.Abs(crabSub - position);

			fuelConsumptions.Add(position, totalFuelConsumed);
			position++;
		} while (position < CrabSubs.Count);

		Puzzle.SolutionA = (from fuel in fuelConsumptions
							orderby fuel.Value ascending
							select fuel.Value).First().ToString();
	}

	private async Task UpdatePuzzle()
	{
		await Utilities.UpdatePuzzleFile(Puzzle);
		Snackbar.Add("Puzzle JSON updated!", Severity.Success);
	}

	}
