@page "/day-4"
@using System.Diagnostics
@using System.Text.RegularExpressions

@inject ISnackbar Snackbar

<MudPaper Width="100%" Class="mx-2 pa-2" Outlined="false" Square="true" Elevation="0">

	<MudText Typo="Typo.h4" GutterBottom="true">Day 4: Camp Cleanup</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionA</MudText>

	<MudText Typo="Typo.body1" GutterBottom="true">--- Part Two ---</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionB</MudText>

	<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@UpdatePuzzle">Update Puzzle</MudButton>
</MudPaper>

@code {
	private Puzzle Puzzle { get; set; } = new();

	private async Task UpdatePuzzle()
	{
		await Utilities.UpdatePuzzleFile(Puzzle);
		Snackbar.Add("Puzzle JSON updated!", Severity.Success);
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			Puzzle = Utilities.GetPuzzleInput("Day4");
			var data = Puzzle.Input.Split('\n', StringSplitOptions.RemoveEmptyEntries);
			Puzzle.SolutionA = GetSolutionA(data);
			Puzzle.SolutionB = GetSolutionB(data);
			StateHasChanged();
		}

	}

	private string GetSolutionA(string[] sectionPairs)
	{
		var sections = sectionPairs.Select(pair => new Regex("\\D+").Replace(pair, " ").Split(' ').Select(n => int.Parse(n)).ToList()).ToList();

		var overlappedPairs = 0;
		foreach (var section in sections)
		{
			var firstPairEnd = (section[1] - section[0]) == 0 ? 1 : (section[1] - section[0])+1;
			var firstPair = Enumerable.Range(section[0], firstPairEnd);
			var secondPairEnd = (section[3] - section[2]) == 0 ? 1 : (section[3] - section[2])+1;
			var secondPair = Enumerable.Range(section[2], secondPairEnd);
			if (firstPair.All(n => secondPair.Contains(n)) || secondPair.All(n => firstPair.Contains(n))) overlappedPairs++;
		}
		return overlappedPairs.ToString();
	}

	private string GetSolutionB(string[] sectionPairs)
	{
		var sections = sectionPairs.Select(pair => new Regex("\\D+").Replace(pair, " ").Split(' ').Select(n => int.Parse(n)).ToList()).ToList();

		var overlappedPairs = 0;
		foreach (var section in sections)
		{
			var firstPairEnd = (section[1] - section[0]) == 0 ? 1 : (section[1] - section[0]) + 1;
			var firstPair = Enumerable.Range(section[0], firstPairEnd);
			var secondPairEnd = (section[3] - section[2]) == 0 ? 1 : (section[3] - section[2]) + 1;
			var secondPair = Enumerable.Range(section[2], secondPairEnd);
			if (firstPair.Any(n => secondPair.Contains(n)) || secondPair.Any(n => firstPair.Contains(n))) overlappedPairs++;
		}
		return overlappedPairs.ToString();
	}

}
