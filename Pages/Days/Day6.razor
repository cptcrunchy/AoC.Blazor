@page "/day-6"
@using System.Diagnostics

@inject ISnackbar Snackbar

<MudPaper Width="100%" Class="mx-2 pa-2" Outlined="false" Square="true" Elevation="0">

	<MudText Typo="Typo.h4" GutterBottom="true">Day 6: Hydrothermal Venture</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionA</MudText>

	<MudText Typo="Typo.body1" GutterBottom="true">--- Part Two ---</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionB</MudText>

	<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@UpdatePuzzle">Update Puzzle</MudButton>
</MudPaper>

@code {
	private Puzzle Puzzle { get; set; } = new();


	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			Puzzle = Utilities.GetPuzzleInput("Day6");
			GetSumOfLanternFish();


			StateHasChanged();
		}

	}

	private void GetSumOfLanternFish()
	{
		var schoolOfLanternFish = Puzzle.Input.Split(',').Select(int.Parse).ToList();

		for (var i = 0; i < 80; i++)
		{
			var newLanternFish = schoolOfLanternFish.Where(fish => fish == 0).Select(x => 8).ToList();
			schoolOfLanternFish = schoolOfLanternFish.Select(x => x == 0 ? 6 : x - 1).Concat(newLanternFish).ToList();
		}

		Puzzle.SolutionA = schoolOfLanternFish.Count.ToString();
	}


	private async Task UpdatePuzzle()
	{
		await Utilities.UpdatePuzzleFile(Puzzle);
		Snackbar.Add("Puzzle JSON updated!", Severity.Success);
	}

}
