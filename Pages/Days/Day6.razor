@page "/day-6"
@using System.Diagnostics

@inject ISnackbar Snackbar

<MudPaper Width="100%" Class="mx-2 pa-2" Outlined="false" Square="true" Elevation="0">

	<MudText Typo="Typo.h4" GutterBottom="true">Day 6: Tuning Trouble</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionA</MudText>

	<MudText Typo="Typo.body1" GutterBottom="true">--- Part Two ---</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionB</MudText>

	<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@UpdatePuzzle">Update Puzzle</MudButton>
</MudPaper>

@code {
	private Puzzle Puzzle { get; set; } = new();

	private async Task UpdatePuzzle()
	{
		await Utilities.UpdatePuzzleFile(Puzzle);
		Snackbar.Add("Puzzle JSON updated!", Severity.Success);
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			Puzzle = Utilities.GetPuzzleInput("Day6");

			Puzzle.SolutionA = GetSolutionA();
			Puzzle.SolutionB = GetSolutionB();
			StateHasChanged();
		}

	}

	private string GetSolutionA()
	{
		var marker = "";
		var counter = 0;
		for(int i = 0; i < Puzzle.Input.Length; i++){
			marker = new string(Puzzle.Input.Skip(i).Take(4).ToArray());
			counter++;
			if(marker.Distinct().Count() == 4){
				counter += 3;
				break;
			}
		}
		return counter.ToString();
	}

	private string GetSolutionB()
	{
		var marker = "";
		var counter = 0;
		for (int i = 0; i < Puzzle.Input.Length; i++)
		{
			marker = new string(Puzzle.Input.Skip(i).Take(14).ToArray());
			counter++;
			if (marker.Distinct().Count() == 14)
			{
				counter += 13;
				break;
			}
		}
		return counter.ToString();
	}

}
