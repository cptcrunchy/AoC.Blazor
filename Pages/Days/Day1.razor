@page "/day-1"


<MudPaper Width="100%" Class="mx-2 pa-2" Outlined="false" Square="true" Elevation="0">

	<MudText Typo="Typo.h4" GutterBottom="true">Day 1: Sonar Sweep</MudText>
	<MudText Typo="Typo.body1" GutterBottom="true">
		You're minding your own business on a ship at sea when the overboard alarm
		goes off! You rush to see if you can help. Apparently, one of the Elves
		tripped and accidentally sent the sleigh keys flying into the ocean!
	</MudText>
	<MudText Typo="Typo.body1" GutterBottom="true">
		Before you know it, you're inside a submarine the Elves keep ready for
		situations like this. It's covered in Christmas lights (because of course
		it is), and it even has an experimental antenna that should be able to
		track the keys if you can boost its signal strength high enough; there's a
		little meter that indicates the antenna's signal strength by displaying 0-
		50 stars.
	</MudText>
	<MudText Typo="Typo.body1" GutterBottom="true">
		As the submarine drops below the surface of the ocean, it automatically
		performs a sonar sweep of the nearby sea floor. On a small screen, the
		sonar sweep report (your puzzle input) appears: each line is a measurement
		of the sea floor depth as the sweep looks further and further away from the
		submarine.
	</MudText>
	<MudText Typo="Typo.body1" GutterBottom="true">For example, suppose you had the following report:</MudText>

<pre>
	<code>
199
200
208
210
200
207
240
269
260
263
	</code>
</pre>
	<br />
	<MudText Typo="Typo.body1" GutterBottom="true">
		This report indicates that, scanning outward from the submarine, the sonar sweep found depths of 199, 200, 208, 210, and so on.
	</MudText>
	<MudText Typo="Typo.body1" GutterBottom="true">
		The first order of business is to figure out how quickly the depth
		increases, just so you know what you're dealing with - you never know if
		the keys will get carried into deeper water by an ocean current or a fish
		or something.
	</MudText>
	<MudText Typo="Typo.body1" GutterBottom="true">
		To do this, count the number of times a depth measurement increases from
		the previous measurement. (There is no measurement before the first
		measurement.) In the example above, the changes are as follows:
	</MudText>
	<pre>
	<code>
199 (N/A - no previous measurement)
200 (increased)
208 (increased)
210 (increased)
200 (decreased)
207 (increased)
240 (increased)
269 (increased)
260 (decreased)
263 (increased)
		</code>
	</pre>
	<br />
	<MudText Typo="Typo.body1" GutterBottom="true">
		In this example, there are 7 measurements that are larger than the previous measurement.
	</MudText>
	<MudText Typo="Typo.body1" GutterBottom="true">
		How many measurements are larger than the previous measurement?
	</MudText>
	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionA</MudText>
	<MudText Typo="Typo.body1" GutterBottom="true">--- Part Two ---</MudText>
	<MudText Typo="Typo.body1" GutterBottom="true">
		Considering every single measurement isn't as useful as you expected: there's just too much noise in the data.
	</MudText>
	<MudText Typo="Typo.body1" GutterBottom="true">
		Instead, consider sums of a three-measurement sliding window. Again considering the above example:
	</MudText>
	<pre>
		<code>
199  A
200  A B
208  A B C
210    B C D
200  E   C D
207  E F   D
240  E F G
269    F G H
260      G H
263        H
		</code>
	</pre>
	<br />
	<MudText Typo="Typo.body1" GutterBottom="true">
		Start by comparing the first and second three-measurement windows. The
		measurements in the first window are marked A (199, 200, 208); their sum is
		199 + 200 + 208 = 607. The second window is marked B (200, 208, 210); its
		sum is 618. The sum of measurements in the second window is larger than the
		sum of the first, so this first comparison increased.
	</MudText>
	<MudText Typo="Typo.body1" GutterBottom="true">
		Your goal now is to count the number of times the sum of measurements in
		this sliding window increases from the previous sum. So, compare A with B,
		then compare B with C, then C with D, and so on. Stop when there aren't
		enough measurements left to create a new three-measurement sum.
	</MudText>
	<pre>
		<code>
A: 607 (N/A - no previous sum)
B: 618 (increased)
C: 618 (no change)
D: 617 (decreased)
E: 647 (increased)
F: 716 (increased)
G: 769 (increased)
H: 792 (increased)
		</code>
	</pre>
	<br />
	<MudText Typo="Typo.body1" GutterBottom="true">
		In the above example, the sum of each three-measurement window is as follows:
	</MudText>
	<MudText Typo="Typo.body1" GutterBottom="true">
		In this example, there are 5 sums that are larger than the previous sum.
	</MudText>
	<MudText Typo="Typo.body1" GutterBottom="true">
		Consider sums of a three-measurement sliding window. How many sums are larger than the previous sum?
	</MudText>
	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionB</MudText>

	<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@UpdatePuzzle">Update Puzzle</MudButton>
</MudPaper>

@code {

	private Puzzle Puzzle { get; set; } = new();

	protected override void OnAfterRender(bool firstRender)
	{

		if (firstRender)
		{
			Puzzle = Utilities.GetPuzzleInput("Day1");

			var depths = Puzzle.Input.Split('\n', StringSplitOptions.RemoveEmptyEntries).Select(d => Int32.Parse(d)).ToList();
			Puzzle.SolutionA = GetDepthIncreases(depths).ToString();
			Puzzle.SolutionB = GetSlidingWindowIncreases(depths).ToString();

			StateHasChanged();
		}

	}


	private async Task UpdatePuzzle()
	{
		await Utilities.UpdatePuzzleFile(Puzzle);
	}

	private int GetDepthIncreases(List<int> depths)
	{
		var increaseCount = 0;
		for (var i = 0; i < depths.Count; i++)
		{
			var depth = depths[i];
			if (i != 0)
			{
				var prev = depths[i - 1];
				if (depth > prev) increaseCount++;
			}
		}

		return increaseCount;
	}

	private int GetSlidingWindowIncreases(List<int> depths)
	{
		var increaseCount = 0;
		for(var i = 0; i < depths.Count; i++)
		{
			var setA = depths.Skip(i).Take(3).ToArray();
			var setB = depths.Skip(i + 1).Take(3).ToArray();
			if(setA.Length == 3 && setB.Length == 3)
			{
				if (setB.Sum() > setA.Sum()) increaseCount++;
			}

		}
		return increaseCount;
	}

}
