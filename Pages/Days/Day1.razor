@page "/day-1"

@inject ISnackbar SnackBar

<MudPaper Width="100%" Class="mx-2 pa-2" Outlined="false" Square="true" Elevation="0">

	<MudText Typo="Typo.h4" GutterBottom="true">Day 1: Calorie Counting</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionA</MudText>

	<MudText Typo="Typo.body1" GutterBottom="true">--- Part Two ---</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionB</MudText>

	<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@UpdatePuzzle">Update Puzzle</MudButton>
</MudPaper>

@code {
	private Puzzle Puzzle { get; set; } = new();

	private async Task UpdatePuzzle()
	{
		await Utilities.UpdatePuzzleFile(Puzzle);
		SnackBar.Add("Puzzle JSON updated!", Severity.Success);
	}

	protected override void OnAfterRender(bool firstRender)
	{

		if (firstRender)
		{
			Puzzle = Utilities.GetPuzzleInput("Day1");
			var data = Puzzle.Input.Split("\n\n").Select(line => line.Split('\n', StringSplitOptions.RemoveEmptyEntries).ToList()).ToList();
			Puzzle.SolutionA = GetMaxCaloriesByElf(data);
			Puzzle.SolutionB = GetTop3Calories(data);
			StateHasChanged();
		}

	}

	private string GetMaxCaloriesByElf(List<List<string>> elves)
	{
		var elfCalories = elves.Select(elf => elf.Select(cal => int.Parse(cal)).ToList().Sum()).ToList().Max();

		return elfCalories.ToString();
	}

	private string GetTop3Calories(List<List<string>> elves)
	{
		var top3Elves = elves.Select(elf => elf.Select(cal => int.Parse(cal)).ToList().Sum()).ToList().OrderByDescending(x => x).Take(3).Sum();
		return top3Elves.ToString();
	}
}
