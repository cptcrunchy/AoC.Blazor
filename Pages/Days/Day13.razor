@page "/day-13"
@using System.Diagnostics
@using System.Text

@inject ISnackbar Snackbar

<MudPaper Width="100%" Class="mx-2 pa-2" Outlined="false" Square="true" Elevation="0">

	<MudText Typo="Typo.h4" GutterBottom="true">Day @Puzzle.Day: @Puzzle.Name</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionA</MudText>

	<MudText Typo="Typo.body1" GutterBottom="true">--- Part Two ---</MudText>

	<MudText Typo="@Typo.body1" GutterBottom="true"><b>Puzzle Answer:</b> @Puzzle.SolutionB</MudText>

	<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@UpdatePuzzle">Update Puzzle</MudButton>
</MudPaper>

@code {
	private Puzzle Puzzle { get; set; } = new();
	private string[] Data { get; set; }

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			Puzzle = Utilities.GetPuzzleInput("Day13");
			Data = Puzzle.Input.Split('\n').ToArray();

			SolvePartA();
			SolvePartB();
			StateHasChanged();
		}

	}

	private void SolvePartA()
	{
		var dots = Data.Where(row => row.Contains(','))
			.Select(row => row.Split(','))
			.Select(coor => (int.Parse(coor[0]), int.Parse(coor[1])))
			.Select(coor => (X: coor.Item1, Y: coor.Item2))
			.ToList();

		var folds = Data.Where(row => row.Contains("fold along"))
			.Select(row => row.Replace("fold along ", "").Split('='))
			.Select(axis => (X: axis[0] == "x" ? int.Parse(axis[1]) : 0, Y: axis[0] == "y" ? int.Parse(axis[1]) : 0))
			.ToList();

		var remainingDots = folds.Take(1).SelectMany(fold => dots.Select(dot => (X: Fold(fold.X, dot.X), Y: Fold(fold.Y, dot.Y)))).Distinct().Count();

		Puzzle.SolutionA = remainingDots.ToString();
	}

	private void SolvePartB()
	{

	}


	private static int Fold(int foldAxis, int axis) => foldAxis > 0 && axis >= foldAxis ? foldAxis - (axis - foldAxis) : axis;


	private async Task UpdatePuzzle()
	{
		await Utilities.UpdatePuzzleFile(Puzzle);
		Snackbar.Add("Puzzle JSON updated!", Severity.Success);
	}

}
